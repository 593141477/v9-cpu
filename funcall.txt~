<stmt file=root/lib/u.h line=1 start=0 end=0>
	<code>#include <u.h></code>
</stmt>
<stmt file=root/lib/u.h line=1 start=0 end=0>
	<code>// u.h</code>
</stmt>
<stmt file=root/lib/u.h line=2 start=0 end=0>
	<code></code>
</stmt>
<stmt file=root/lib/u.h line=3 start=0 end=0>
	<code>// instruction set</code>
</stmt>
<stmt file=root/lib/u.h line=4 start=0 end=0>
	<code>enum {</code>
</stmt>
<stmt file=root/lib/u.h line=5 start=0 end=0>
	<code>  HALT,ENT ,LEV ,JMP ,JMPI,JSR ,JSRA,LEA ,LEAG,CYC ,MCPY,MCMP,MCHR,MSET, // system</code>
</stmt>
<stmt file=root/lib/u.h line=6 start=0 end=0>
	<code>  LL  ,LLS ,LLH ,LLC ,LLB ,LLD ,LLF ,LG  ,LGS ,LGH ,LGC ,LGB ,LGD ,LGF , // load a</code>
</stmt>
<stmt file=root/lib/u.h line=7 start=0 end=0>
	<code>  LX  ,LXS ,LXH ,LXC ,LXB ,LXD ,LXF ,LI  ,LHI ,LIF ,</code>
</stmt>
<stmt file=root/lib/u.h line=8 start=0 end=0>
	<code>  LBL ,LBLS,LBLH,LBLC,LBLB,LBLD,LBLF,LBG ,LBGS,LBGH,LBGC,LBGB,LBGD,LBGF, // load b</code>
</stmt>
<stmt file=root/lib/u.h line=9 start=0 end=0>
	<code>  LBX ,LBXS,LBXH,LBXC,LBXB,LBXD,LBXF,LBI ,LBHI,LBIF,LBA ,LBAD,</code>
</stmt>
<stmt file=root/lib/u.h line=10 start=0 end=0>
	<code>  SL  ,SLH ,SLB ,SLD ,SLF ,SG  ,SGH ,SGB ,SGD ,SGF ,                     // store</code>
</stmt>
<stmt file=root/lib/u.h line=11 start=0 end=0>
	<code>  SX  ,SXH ,SXB ,SXD ,SXF ,</code>
</stmt>
<stmt file=root/lib/u.h line=12 start=0 end=0>
	<code>  ADDF,SUBF,MULF,DIVF,                                                   // arithmetic</code>
</stmt>
<stmt file=root/lib/u.h line=13 start=0 end=0>
	<code>  ADD ,ADDI,ADDL,SUB ,SUBI,SUBL,MUL ,MULI,MULL,DIV ,DIVI,DIVL,</code>
</stmt>
<stmt file=root/lib/u.h line=14 start=0 end=0>
	<code>  DVU ,DVUI,DVUL,MOD ,MODI,MODL,MDU ,MDUI,MDUL,AND ,ANDI,ANDL,</code>
</stmt>
<stmt file=root/lib/u.h line=15 start=0 end=0>
	<code>  OR  ,ORI ,ORL ,XOR ,XORI,XORL,SHL ,SHLI,SHLL,SHR ,SHRI,SHRL,</code>
</stmt>
<stmt file=root/lib/u.h line=16 start=0 end=0>
	<code>  SRU ,SRUI,SRUL,EQ  ,EQF ,NE  ,NEF ,LT  ,LTU ,LTF ,GE  ,GEU ,GEF ,      // logical</code>
</stmt>
<stmt file=root/lib/u.h line=17 start=0 end=0>
	<code>  BZ  ,BZF ,BNZ ,BNZF,BE  ,BEF ,BNE ,BNEF,BLT ,BLTU,BLTF,BGE ,BGEU,BGEF, // conditional</code>
</stmt>
<stmt file=root/lib/u.h line=18 start=0 end=0>
	<code>  CID ,CUD ,CDI ,CDU ,                                                   // conversion</code>
</stmt>
<stmt file=root/lib/u.h line=19 start=0 end=0>
	<code>  CLI ,STI ,RTI ,BIN ,BOUT,NOP ,SSP ,PSHA,PSHI,PSHF,PSHB,POPB,POPF,POPA, // misc</code>
</stmt>
<stmt file=root/lib/u.h line=20 start=0 end=0>
	<code>  IVEC,PDIR,SPAG,TIME,LVAD,TRAP,LUSP,SUSP,LCL ,LCA ,PSHC,POPC,MSIZ,</code>
</stmt>
<stmt file=root/lib/u.h line=21 start=0 end=0>
	<code>  PSHG,POPG,NET1,NET2,NET3,NET4,NET5,NET6,NET7,NET8,NET9,</code>
</stmt>
<stmt file=root/lib/u.h line=22 start=0 end=0>
	<code>  POW ,ATN2,FABS,ATAN,LOG ,LOGT,EXP ,FLOR,CEIL,HYPO,SIN ,COS ,TAN ,ASIN, // math</code>
</stmt>
<stmt file=root/lib/u.h line=23 start=0 end=0>
	<code>  ACOS,SINH,COSH,TANH,SQRT,FMOD,</code>
</stmt>
<stmt file=root/lib/u.h line=24 start=0 end=0>
	<code>  IDLE</code>
</stmt>
<stmt file=root/lib/u.h line=25 start=0 end=0>
	<code>};</code>
</stmt>
<stmt file=root/lib/u.h line=26 start=0 end=0>
	<code></code>
</stmt>
<stmt file=root/lib/u.h line=27 start=0 end=0>
	<code>// system calls</code>
</stmt>
<stmt file=root/lib/u.h line=28 start=0 end=0>
	<code>enum {</code>
</stmt>
<stmt file=root/lib/u.h line=29 start=0 end=0>
	<code>  S_fork=1, S_exit,   S_wait,   S_pipe,   S_write,  S_read,   S_close,  S_kill,</code>
</stmt>
<stmt file=root/lib/u.h line=30 start=0 end=0>
	<code>  S_exec,   S_open,   S_mknod,  S_unlink, S_fstat,  S_link,   S_mkdir,  S_chdir,</code>
</stmt>
<stmt file=root/lib/u.h line=31 start=0 end=0>
	<code>  S_dup2,   S_getpid, S_sbrk,   S_sleep,  S_uptime, S_lseek,  S_mount,  S_umount,</code>
</stmt>
<stmt file=root/lib/u.h line=32 start=0 end=0>
	<code>  S_socket, S_bind,   S_listen, S_poll,   S_accept, S_connect, </code>
</stmt>
<stmt file=root/lib/u.h line=33 start=0 end=0>
	<code>};</code>
</stmt>
<stmt file=root/lib/u.h line=34 start=0 end=0>
	<code></code>
</stmt>
<stmt file=root/lib/u.h line=35 start=0 end=0>
	<code>typedef unsigned char uchar;</code>
</stmt>
<stmt file=root/lib/u.h line=36 start=0 end=0>
	<code>typedef unsigned short ushort;</code>
</stmt>
<stmt file=root/lib/u.h line=37 start=0 end=0>
	<code>typedef unsigned int uint;</code>
</stmt>
<stmt file=root/usr/funcall.c line=38 start=0 end=0>
	<code></code>
</stmt>
<stmt file=root/usr/funcall.c line=2 start=0 end=0>
	<code>int ret;</code>
</stmt>
<stmt file=root/usr/funcall.c line=3 start=0 end=0>
	<code>out(port, val)</code>
</stmt>
<stmt file=root/usr/funcall.c line=4 start=0 end=0>
	<code>{</code>
</stmt>
<stmt file=root/usr/funcall.c line=5 start=0 end=1>
	<code>  asm(LL,8);   // load register a with port</code>
	<emi>
		00000000  0000080e  LL    0x8 (D 8)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=6 start=1 end=2>
	<code>  asm(LBL,16); // load register b with val</code>
	<emi>
		00000004  00001026  LBL   0x10 (D 16)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=7 start=2 end=3>
	<code>  asm(BOUT);   // output byte to console</code>
	<emi>
		00000008  0000009a  BOUT
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=8 start=3 end=3>
	<code>}</code>
</stmt>
<stmt file=root/usr/funcall.c line=9 start=3 end=3>
	<code></code>
</stmt>
<stmt file=root/usr/funcall.c line=10 start=3 end=4>
	<code>int write(int f, char *s, int n)</code>
	<emi>
		0000000c  00000002  LEV   0x0 (D 0)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=11 start=4 end=4>
	<code>{</code>
</stmt>
<stmt file=root/usr/funcall.c line=12 start=4 end=4>
	<code>  int i = 1, j = 2;</code>
</stmt>
<stmt file=root/usr/funcall.c line=13 start=4 end=4>
	<code>  double d = 2.0;</code>
</stmt>
<stmt file=root/usr/funcall.c line=14 start=4 end=4>
	<code>  int k = 3;</code>
</stmt>
<stmt file=root/usr/funcall.c line=15 start=4 end=15>
	<code>  ret = 1;</code>
	<emi>
		00000010  ffffe801  ENT   0xffffffe8 (D -24)
		00000014  00000123  LI    0x1 (D 1)
		00000018  00001440  SL    0x14 (D 20)
		0000001c  00000223  LI    0x2 (D 2)
		00000020  00001040  SL    0x10 (D 16)
		00000024  00020025  LIF   0x200 (D 512)
		00000028  00000843  SLD   0x8 (D 8)
		0000002c  00000323  LI    0x3 (D 3)
		00000030  00000440  SL    0x4 (D 4)
		00000034  00000123  LI    0x1 (D 1)
		00000038  00000045  SG    0x0 (D 0)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=16 start=15 end=17>
	<code>  i=n;</code>
	<emi>
		0000003c  0000300e  LL    0x30 (D 48)
		00000040  00001440  SL    0x14 (D 20)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=17 start=17 end=18>
	<code>  while (i--)</code>
	<emi>
		00000044  00000003  JMP   <fwd>
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=18 start=18 end=27>
	<code>    out(f, *s++);</code>
	<emi>
		00000048  0000280e  LL    0x28 (D 40)
		0000004c  ffffff57  SUBI  0xffffffff (D -1)
		00000050  00002840  SL    0x28 (D 40)
		00000054  ffffff1f  LXC   0xffffffff (D -1)
		00000058  0000009d  PSHA
		0000005c  0000280e  LL    0x28 (D 40)
		00000060  0000009d  PSHA
		00000064  ffff9805  JSR   0xffffff98 (TO 0x0)
		00000068  00001001  ENT   0x10 (D 16)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=19 start=27 end=34>
	<code>  return i;</code>
	<emi>
		0000006c  0000140e  LL    0x14 (D 20)
		00000070  00000157  SUBI  0x1 (D 1)
		00000074  00001440  SL    0x14 (D 20)
		00000078  00000154  ADDI  0x1 (D 1)
		0000007c  00000086  BNZ   <fwd>
		00000080  0000140e  LL    0x14 (D 20)
		00000084  00001802  LEV   0x18 (D 24)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=20 start=34 end=34>
	<code>}  </code>
</stmt>
<stmt file=root/usr/funcall.c line=21 start=34 end=34>
	<code></code>
</stmt>
<stmt file=root/usr/funcall.c line=22 start=34 end=35>
	<code>main()</code>
	<emi>
		00000088  00001802  LEV   0x18 (D 24)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=23 start=35 end=35>
	<code>{</code>
</stmt>
<stmt file=root/usr/funcall.c line=24 start=35 end=35>
	<code>  int i;</code>
</stmt>
<stmt file=root/usr/funcall.c line=25 start=35 end=38>
	<code>  ret = 0;</code>
	<emi>
		0000008c  fffff801  ENT   0xfffffff8 (D -8)
		00000090  00000023  LI    0x0 (D 0)
		00000094  00000045  SG    0x0 (D 0)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=26 start=38 end=38>
	<code>  //Change S1/S2 ID to your student ID, and change 12 to new str length</code>
</stmt>
<stmt file=root/usr/funcall.c line=27 start=38 end=45>
	<code>  ret = write(1, "S1_ID S2_ID",12);</code>
	<emi>
		00000098  00000c9e  PSHI  0xc (D 12)
		0000009c  00000008  LEAG  0x0 (D 0)
		000000a0  0000009d  PSHA
		000000a4  0000019e  PSHI  0x1 (D 1)
		000000a8  ffff6405  JSR   0xffffff64 (TO 0x10)
		000000ac  00001801  ENT   0x18 (D 24)
		000000b0  00000045  SG    0x0 (D 0)
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=28 start=45 end=46>
	<code>  asm(HALT);</code>
	<emi>
		000000b4  00000000  HALT
	</emi>
</stmt>
<stmt file=root/usr/funcall.c line=29 start=46 end=46>
	<code>}</code>
</stmt>
<stmt file=root/usr/funcall.c line=30 start=46 end=47>
	<code></code>
	<emi>
		000000b8  00000802  LEV   0x8 (D 8)
	</emi>
</stmt>
